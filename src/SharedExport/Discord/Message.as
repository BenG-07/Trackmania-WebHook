namespace DiscordNotify {
    /*
    Represents the response from Discord, when getting a Message-object.
    */
    shared class Message : DiscordBase {                                                                             
        // Id of the message.
        Snowflake@ ID;

        // Id of the channel the message was sent in.
        Snowflake@ ChannelId;

        // The author of this message (not guaranteed to be a valid user, see below).
        User@ Author;

        // Contents of the message.
        string Content;

        // When this message was sent.
        uint64 Timestamp;

        // When this message was edited (or null if never).
        uint64 EditedTimestamp;

        // Whether this was a TTS message.
        bool TTS;

        // Whether this message mentions everyone.
        bool MentionEveryone;

        // Users specifically mentioned in the message.
        array<User@> Mentions;

        // Roles specifically mentioned in this message.
        array<Role@> MentionRoles;

        // Channels specifically mentioned in this message.
        //array<ChannelMention@> ChannelMentions;

        // Any attached files.
        //array<Attachment@> Attachments;

        // Any embedded content.
        array<Embed@> Embeds;

        // Reactions to the message.
        //array<Reaction@> Reactions;

        // Used for validating a message was sent.
        //string Nonce;

        // Whether this message is pinned.
        bool Pinned;

        // If the message is generated by a webhook, this is the webhook's id.
        Snowflake@ WebhookId;

        // Type of message.
        int Type;

        // Sent with Rich Presence-related chat embeds.
        //MessageActivity@ Activity;

        // Sent with Rich Presence-related chat embeds.
        //Application@ Application;

        // If the message is an Interaction or application-owned webhook, this is the id of the application.
        //Snowflake@ ApplicationID;

        // Data showing the source of a crosspost, channel follow add, pin, or reply message.
        //MessageReference@ MessageReference;

        // Message flags combined as a bitfield.
        int Flags;

        // The message associated with the message_reference.
        //Message@ ReferencedMessage;

        // In preview. Sent if the message is sent as a result of an interaction.
        //MessageInteractionMetaData@ InteractionMetaData;

        // Deprecated in favor of interaction_metadata; sent if the message is a response to an interaction.
        //MessageInteraction@ Interaction;

        // The thread that was started from this message, includes thread member object.
        //Channel@ Thread;

        // Sent if the message contains components like buttons, action rows, or other interactive components.
        //array<Component@> Components;

        // Sent if the message contains stickers.
        //array<StickerItem@> StickerItems;

        // Deprecated the stickers sent with the message.
        //array<Sticker@> Stickers;

        // A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the     message in a thread, it can be used to estimate the     relative Position of the message in a thread in company with    total_message_sent on parent thread.
        //int Position
        // Data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message.
        //RoleSubscriptionData@ RoleSubscriptionData;

        // Data for users, members, channels, and roles in the message's auto-populated select menus.
        //Resolved@ Resolved;


        Message(Json::Value@ message) {
            if (message.HasKey("id")) @ID = Snowflake(message["id"]);
            if (message.HasKey("channel_id")) @ChannelId = Snowflake(message["channel_id"]);
            if (message.HasKey("author")) @Author = User(message["author"]);
            Content = GetStringIfExists(message, "content");
            //Timestamp = OffsetDateTime.parse(message["timestamp"]);
            //EditedTimestamp = OffsetDateTime.parse(message["edited_timestamp"]);
            TTS = GetBoolIfExists(message, "tts");
            MentionEveryone = GetBoolIfExists(message, "mention_everyone");
            //Mentions = message["mentions"];
            //MentionRoles = message["mention_roles"];
            //Embeds = message["embeds"];
            Pinned = GetBoolIfExists(message, "pinned");
            //WebhookId = message["webhook_id"];
            Type = GetIntIfExists(message, "type");
            Flags = GetIntIfExists(message, "flags");
        }
    }
}
