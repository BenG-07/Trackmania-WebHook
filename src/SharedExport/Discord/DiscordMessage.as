/*
Represents the response from Discord, when getting a Message-object.
*/
class DiscordMessage : DiscordBase
{                                                                             
    // Id of the message.
    DiscordSnowflake@ ID;
    
    // Id of the channel the message was sent in.
    DiscordSnowflake@ ChannelId;
    
    // The author of this message (not guaranteed to be a valid user, see below).
    DiscordUser@ Author;
    
    // Contents of the message.
    string Content;
    
    // When this message was sent.
    uint64 Timestamp;
    
    // When this message was edited (or null if never).
    uint64 EditedTimestamp;
    
    // Whether this was a TTS message.
    bool TTS;
    
    // Whether this message mentions everyone.
    bool MentionEveryone;
    
    // Users specifically mentioned in the message.
    array<DiscordUser@> Mentions;
    
    // Roles specifically mentioned in this message.
    array<DiscordRole@> MentionRoles;
    
    // Channels specifically mentioned in this message.
    //array<DiscordChannelMention@> ChannelMentions;
    
    // Any attached files.
    //array<DiscordAttachment@> Attachments;
    
    // Any embedded content.
    array<DiscordEmbed@> Embeds;
    
    // Reactions to the message.
    //array<DiscordReaction@> Reactions;
    
    // Used for validating a message was sent.
    //string Nonce;
    
    // Whether this message is pinned.
    bool Pinned;
    
    // If the message is generated by a webhook, this is the webhook's id.
    DiscordSnowflake@ WebhookId;
    
    // Type of message.
    int Type;
    
    // Sent with Rich Presence-related chat embeds.
    //DiscordMessageActivity@ Activity;
    
    // Sent with Rich Presence-related chat embeds.
    //DiscordApplication@ Application;
    
    // If the message is an Interaction or application-owned webhook, this is the id of the application.
    //DiscordSnowflake@ ApplicationID;
    
    // Data showing the source of a crosspost, channel follow add, pin, or reply message.
    //DiscordMessageReference@ MessageReference;
    
    // Message flags combined as a bitfield.
    int Flags;
    
    // The message associated with the message_reference.
    //DiscordMessage@ ReferencedMessage;
    
    // In preview. Sent if the message is sent as a result of an interaction.
    //DiscordMessageInteractionMetaData@ InteractionMetaData;
    
    // Deprecated in favor of interaction_metadata; sent if the message is a response to an interaction.
    //DiscordMessageInteraction@ Interaction;
    
    // The thread that was started from this message, includes thread member object.
    //DiscordChannel@ Thread;
    
    // Sent if the message contains components like buttons, action rows, or other interactive components.
    //array<DiscordComponent@> Components;
    
    // Sent if the message contains stickers.
    //array<DiscordStickerItem@> StickerItems;
    
    // Deprecated the stickers sent with the message.
    //array<DiscordSticker@> Stickers;
    
    // A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the     message in a thread, it can be used to estimate the relative Position of the message in a thread in company with    total_message_sent on parent thread.
    //int Position
    // Data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message.
    //DiscordRoleSubscriptionData@ RoleSubscriptionData;
    
    // Data for users, members, channels, and roles in the message's auto-populated select menus.
    //DiscordResolved@ Resolved;
    

    DiscordMessage(Json::Value@ message)
    {
        if (message.HasKey("id")) @ID = DiscordSnowflake(message["id"]);
        if (message.HasKey("channel_id")) @ChannelId = DiscordSnowflake(message["channel_id"]);
        if (message.HasKey("author")) @Author = DiscordUser(message["author"]);
        Content = GetStringIfExists(message, "content");
        //Timestamp = OffsetDateTime.parse(message["timestamp"]);
        //EditedTimestamp = OffsetDateTime.parse(message["edited_timestamp"]);
        TTS = GetBoolIfExists(message, "tts");
        MentionEveryone = GetBoolIfExists(message, "mention_everyone");
        //Mentions = message["mentions"];
        //MentionRoles = message["mention_roles"];
        //Embeds = message["embeds"];
        Pinned = GetBoolIfExists(message, "pinned");
        //WebhookId = message["webhook_id"];
        Type = GetIntIfExists(message, "type");
        Flags = GetIntIfExists(message, "flags");
    }
}
